{"version":3,"sources":["redux/actions.js","components/login/Login.js","components/dashboard/Search.js","components/dashboard/population/Population.js","utils/index.js","components/dashboard/planet/Planet.js","components/modal/Modal.js","components/dashboard/planet_details/PlanetDetails.js","components/dashboard/PlanetList.js","components/header/Header.js","components/dashboard/Dashboard.js","components/not_found/NotFound.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["LOGOUT_USER","timeout","connect","state","dispatch","loginUser","user","type","props","useState","userName","setUserName","password","setPassword","message","setMessage","className","data-test","placeholder","value","onChange","e","target","onClick","trim","length","fetch","then","response","json","results","birth_year","history","push","Population","num","Number","isNaN","suffixNum","Math","floor","parseFloat","pow","toPrecision","intToString","population","Planet","fontSize","fontWeight","getFontValues","parseInt","style","hasOwnProperty","onPlanetClick","name","Modal","ReactDOM","createPortal","onClose","title","children","document","getElementById","PlanetDetails","climate","diameter","orbital_period","rotation_period","terrain","surface_water","gravity","PlanetList","planet","setState","showModal","selectedPlanet","onModalClose","planets","text","this","listComponents","list","map","item","key","Fragment","width","React","Component","Search","onTextChange","loading","clearTimeout","setTimeout","onSearch","bind","handleKeyPress","event","onKeyPress","Header","isLogin","onLogout","onLogoutUser","NotFound","App","basename","process","exact","path","component","Login","Dashboard","Boolean","window","location","hostname","match","initState","messages","reducer","action","Object","assign","store","createStore","setupReducer","__REDUX_DEVTOOLS_EXTENSION__","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1e5ed02.chunk.js","sourcesContent":["const LOGIN_USER = \"LOGIN_USER\";\nconst LOGOUT_USER = \"LOGOUT_USER\";\n\nfunction loginUser (user) {\n    return {\n        type: \"LOGIN_USER\",\n        user\n    };\n}\n\nfunction logoutUser () {\n    return {\n        type: LOGOUT_USER\n    };\n}\n\nexport {\n    LOGIN_USER,\n    LOGOUT_USER,\n\n    loginUser,\n    logoutUser\n};","import React, { useState } from 'react';\nimport { connect } from  'react-redux';\n\nimport { loginUser } from '../../redux/actions';\n\nconst Login = props => {\n\n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n\n    const onLogin = () => {\n        setMessage(\"\");\n        setUserName(userName.trim());\n        setUserName(password.trim());\n\n        if (userName.length > 0 && password.length > 0) {\n            fetch(`https://swapi.co/api/people?search=${userName}`)\n                .then(response => response.json())\n                .then(response => {\n                    const user = response.results[0];\n\n                    if (user && user.birth_year === password) {\n                        props.history.push('/dashboard');\n                        props.loginUser(user);     \n                    } else {\n                        setMessage(\"Invalid credentials\");\n                    }\n                });\n        } else {\n            setMessage(\"Invalid credentials\");\n        }\n    }\n\n    return (\n        <div className=\"login-page\">\n            <div className=\"login-form\">\n                <h1>Login</h1>\n                <input data-test=\"username\" type=\"email\" placeholder=\"Username\" className=\"text-input\" value={userName} onChange={e => setUserName(e.target.value)}/>\n                <input data-test=\"password\" type=\"password\" placeholder=\"Password\" className=\"text-input\" value={password} onChange={e => setPassword(e.target.value)}/>\n                <span className=\"error-message\">{message}</span>\n                <button className=\"login-button\" onClick ={onLogin}>Login</button>\n            </div>\n        </div>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginUser(user) {\n            dispatch(loginUser(user))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\n\nimport PlanetList from './PlanetList';\n\nlet timeout;\n\nclass Search extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: \"t\",\n            planets: [],\n            loading: false\n        };\n    }\n\n    componentDidMount() {\n        this.onSearch();\n    }\n\n    onTextChange = (e) => {\n        const text = e.target.value;\n\n        this.setState({\n            text,\n            loading: true\n        });\n\n        clearTimeout(timeout);\n        \n        timeout = setTimeout(function() {\n            this.onSearch();\n        }.bind(this), 200);\n    }\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter') {\n            this.onSearch();\n        }\n    }\n    \n    onSearch = () => {\n        const { text } = this.state;\n\n        if (text.length > 0) {\n            fetch(`https://swapi.co/api/planets?search=${text}`)\n                .then(response => response.json())\n                .then(response => {\n                    let planets = response.results;\n\n                    this.setState({\n                        planets,\n                        loading: false\n                    });\n                });\n        } else {\n            this.setState({\n                planets: [],\n                loading: false\n            });\n        }\n    }\n\n    render() {\n\n        const { planets, loading, text } = this.state;\n\n        let listComponents = null;\n        if (loading) {\n            listComponents = (<div className=\"not-found no-result\">\n                                <h1>Searching planets</h1>\n                            </div>);\n        } else {\n            listComponents = <PlanetList planets={planets} text={text}/>\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"search-box\">\n                    <input className=\"search-text\" type=\"text\" value={this.state.text} placeholder=\"Search here..\" onKeyPress={this.handleKeyPress} onChange={this.onTextChange}/>\n                    <button className=\"search-button\" onClick={this.onSearch}>Search</button>\n                </div>\n                <div>\n                { listComponents }\n                </div>\n            </React.Fragment>   \n        )\n    }\n}\n\nexport default Search;","import React from 'react';\n\nimport { intToString } from '../../../utils'; \n\nconst Population = props => {\n    return <span data-test=\"planet-population\" className=\"planet-population\">{intToString(props.population)}</span>\n}\n\nexport default Population;","export const findByTestAttribute = (component, attr) => {\n    return component.find(`[data-test='${attr}']`);\n}\n\nexport const intToString = value => {\n    const num = Number(value);\n    if (isNaN(num)) return value;\n    const suffixes = [\"\", \"k\", \"m\", \"b\",\"t\"];\n    const suffixNum = Math.floor((\"\" + num).length / 3);\n    const shortValue = parseFloat((suffixNum !== 0 ? (num / Math.pow(1000, suffixNum)) : num).toPrecision(2));\n\n    return shortValue + \" \" + suffixes[suffixNum];\n}\n\nexport const getFontValues = value => {\n    let fontSize = 20,\n        fontWeight = 300;\n\n    while(value > 100000) {\n        value /= 100;\n        fontSize += 4;\n        fontWeight += 100;\n    }\n\n    return { fontSize, fontWeight };\n}\n\n\n\n","import React from 'react';\n\nimport Population from '../population/Population';\n\nimport { getFontValues } from '../../../utils';\n\nconst Planet = props => {\n        \n    const { value } = props;\n    let numberPopulation = parseInt(value.population);\n\n    let { fontSize, fontWeight } = getFontValues(numberPopulation);\n\n    const style = {\n        fontSize: fontSize+'px',\n        fontWeight: fontWeight\n    }\n\n    const onPlanetClick = () => {\n        if (props.hasOwnProperty('onPlanetClick')) {\n            props.onPlanetClick(value);\n        }\n    }\n\n    return (\n        <div className=\"planet\" onClick={onPlanetClick}>\n            <span data-test=\"planet-title\" className=\"planet-title\" style={style}>{value.name}</span>\n            <Population population={value.population} />\n        </div>\n    )\n}\n\nexport default Planet;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Modal = props => {\n\n    const onClose = event => {\n        if (event.target.className === 'modal-view') {\n            props.onClose();\n        }\n    }\n\n    return (\n        ReactDOM.createPortal(\n            <div className=\"modal-view\" onClick={(e) => onClose(e)}>\n                <div className=\"modal\">\n                <div className=\"modal-header\">\n                    <div className=\"modal-title\">{props.title}</div>\n                    <button className=\"modal-close\" onClick={props.onClose}>X</button>\n                </div>\n                <div className=\"modal-content\">\n                    { props.children }\n                </div>\n            </div>\n        </div>, document.getElementById('root'))\n    );\n\n}\n\nexport default Modal;","import React from 'react';\n\nconst PlanetDetails = props => {\n        \n    const { value } = props;\n\n    return (\n        <div className=\"planet-details\">\n            <div className=\"planet-detail\">\n                <span className=\"title\">Climate: </span>\n                <span data-test=\"planet-climate\">{value.climate}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Diameter: </span>\n                <span data-test=\"planet-diameter\">{value.diameter}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Orbital Period: </span>\n                <span data-test=\"planet-orbital-period\">{value.orbital_period}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Rotation Period: </span>\n                <span data-test=\"planet-rotation-period\">{value.rotation_period}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Terrain: </span>\n                <span data-test=\"planet-terrain\">{value.terrain}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Surface water: </span>\n                <span data-test=\"planet-surface-water\">{value.surface_water}</span>\n            </div>\n            <div className=\"planet-detail\">\n                <span className=\"title\">Gravity: </span>\n                <span data-test=\"planet-gravity\">{value.gravity}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default PlanetDetails;","import React from 'react';\n\nimport Planet from './planet/Planet';\nimport Modal from '../modal/Modal';\nimport PlanetDetails from './planet_details/PlanetDetails';\n\nclass PlanetList extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            planets: [],\n            text: '',\n            showModal: false,\n            selectedPlanet: {}\n        };\n    }\n\n    static getDerivedStateFromProps(props) {\n        return props;\n    }\n\n    onPlanetClick = planet => {\n        this.setState({\n            showModal: true,\n            selectedPlanet: planet\n        });\n    }\n\n    onModalClose = () => {\n        this.setState({\n            showModal: false,\n            selectedPlanet: {}\n        });\n    }\n\n    render() {\n\n        let { planets, text, showModal, selectedPlanet } = this.state;\n\n        let listComponents = (\n            <div className=\"not-found no-result\">\n                <h1>No results</h1>\n            </div>\n        );\n    \n        if (planets.length !== 0) {\n            const list = planets.map(item => {\n                return <Planet key={item.name} value={item} onPlanetClick={this.onPlanetClick}></Planet>;\n            })\n    \n            listComponents = (\n                <React.Fragment>\n                    <div className=\"searched-for\">Search keyword: <span>{text}</span></div>\n                    <div className=\"search-results\">\n                    {\n                        list\n                    }\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n            {\n                listComponents\n            }\n            {\n                showModal ? \n                (\n                <Modal title={'Details'} onClose={() => this.onModalClose()} width={500}>\n                        <div className=\"planet\">\n                            <Planet value={selectedPlanet}/>\n                            <PlanetDetails value={selectedPlanet} />\n                        </div>\n                </Modal>\n                ) : null\n            }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PlanetList;","import React from 'react';\n\nconst Header = props  => {\n\n    return (\n        <header data-test=\"header-component\">\n            <h1 data-test=\"header-title\">Star Wars</h1>\n            { \n                props.isLogin ?\n                (<div className=\"options\">\n                    <span data-test=\"username\" className=\"username\">{props.user.name}</span>\n                    <button data-test=\"logout-button\" className=\"option-button\" onClick={props.onLogout}>Logout</button>\n                </div>) : null\n            }\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from  'react-redux';\n\nimport { logoutUser } from '../../redux/actions';\n\nimport Search from './Search';\nimport Header from '../header/Header';\n\nconst Dashboard = props => {\n\n    const onLogout = () => {\n        props.history.push('/');\n        props.onLogoutUser();\n    }\n\n    return (\n        <React.Fragment>\n            <Header {...props} onLogout={onLogout}/>\n            <Search {...props} />\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        isLogin: state.isLogin\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogoutUser() {\n            dispatch(logoutUser())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <div className=\"not-found\">\n            <h1>Not Found</h1>\n        </div>\n    );\n}\n\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nimport './app.scss';\n\nimport Login from \"./components/login/Login\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport NotFound from './components/not_found/NotFound';\n\nconst App = () => {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/dashboard\" component={Dashboard}/>\n          <Route component={NotFound} />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    LOGIN_USER,\n    LOGOUT_USER\n\n} from './actions';\n\nlet initState = {\n    isLogin: false,\n    messages: [],\n    user: \"\"\n};\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case LOGIN_USER : {\n            let  { isLogin } = state;\n            isLogin = !isLogin;\n            const { user } = action;\n            return Object.assign({}, state, { user, isLogin });\n        }\n        case LOGOUT_USER : {\n            let  { isLogin, userName } = state;\n            isLogin = !isLogin;\n            userName = \"\";\n            return Object.assign({}, state, { userName, isLogin });\n        }\n   \n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { createStore } from 'redux';\n\nimport setupReducer  from './reducers';\n\nconst store = createStore(setupReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}