{"version":3,"sources":["redux/actions.js","components/Login.js","components/Planet.js","components/Search.js","components/Modal.js","components/PlanetDetails.js","components/Header.js","components/Dashboard.js","components/NotFound.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["LOGIN_USER","LOGOUT_USER","ADD_MESSAGE","Login","props","onLogin","setState","message","state","userName","password","fetch","then","response","json","user","results","birth_year","history","push","loginUser","console","log","onUserNameChange","event","target","value","onPasswordChange","className","type","placeholder","this","onChange","onClick","React","Component","connect","dispatch","timeout","Population","num","Number","isNaN","suffixNum","Math","floor","length","parseFloat","pow","toPrecision","intToString","population","Planet","numberPopulation","parseInt","fontsize","fontweight","style","fontSize","fontWeight","onPlanetClick","name","Modal","ReactDOM","createPortal","e","onClose","title","children","document","getElementById","PlanetDetails","climate","diameter","orbital_period","rotation_period","terrain","surface_water","gravity","Search","onTextChange","text","loading","clearTimeout","setTimeout","onSearch","bind","handleKeyPress","key","planets","onModalClose","showModal","selectedPlanet","planet","listComponents","list","map","item","Fragment","onKeyPress","width","Header","isLogin","onLogout","Dashboard","onLogoutUser","NotFound","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","initState","messages","reducer","action","Object","assign","store","createStore","setupReducer","__REDUX_DEVTOOLS_EXTENSION__","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ade223c.chunk.js","sourcesContent":["const LOGIN_USER = \"LOGIN_USER\";\nconst LOGOUT_USER = \"LOGOUT_USER\";\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\n\nfunction loginUser (user) {\n    return {\n        type: LOGIN_USER,\n        user\n    };\n}\n\nfunction logoutUser () {\n    return {\n        type: LOGOUT_USER\n    };\n}\n\nfunction addMessage (message) {\n    return {\n        type: ADD_MESSAGE,\n        message\n    }\n}\n\nexport {\n    LOGIN_USER,\n    LOGOUT_USER,\n    ADD_MESSAGE,\n\n    loginUser,\n    logoutUser,\n    addMessage\n};","import React from 'react';\nimport { connect } from  'react-redux';\n\nimport { loginUser } from '../redux/actions';\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userName: \"\",\n            password: \"\",\n            message: \"\"\n        }\n\n    }\n\n    onLogin = () => {\n        this.setState({\n            message: \"\"\n        });\n\n        let { userName, password } = this.state;\n\n        fetch(`https://swapi.co/api/people?search=${userName}`)\n            .then(response => response.json())\n            .then(response => {\n                let user = response.results[0];\n\n                if (user && user.birth_year === password) {\n                    this.props.history.push('/dashboard');\n                    this.props.loginUser(user);     \n                } else {\n\n                    console.log(\"sddas\");\n\n                    this.setState({\n                        message: \"Invalid credentials\"\n                    });\n                }\n            });\n    }\n\n    onUserNameChange = event => {\n        this.setState({\n            userName: event.target.value\n        });\n    }\n\n    onPasswordChange = event => {\n        this.setState({\n            password: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"login-page\">\n                <div className=\"login-form\">\n                    <h1>Login</h1>\n                    <input type=\"email\" placeholder=\"Username\" className=\"text-input\" value={this.state.userName} onChange={this.onUserNameChange}/>\n                    <input type=\"password\" placeholder=\"Password\" className=\"text-input\" value={this.state.password} onChange={this.onPasswordChange}/>\n\n                    <span className=\"error-message\">{this.state.message}</span>\n\n                    <button className=\"login-button\" onClick ={this.onLogin}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        \n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginUser(user) {\n            dispatch(loginUser(user))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\n\nfunction intToString (value) {\n    let num = Number(value);\n    if (isNaN(num)) return value;\n    var suffixes = [\"\", \"k\", \"m\", \"b\",\"t\"];\n    var suffixNum = Math.floor((\"\" + num).length / 3);\n    var shortValue = parseFloat((suffixNum !== 0 ? (num / Math.pow(1000, suffixNum)) : num).toPrecision(2));\n\n    return shortValue + \" \" + suffixes[suffixNum];\n}\n\nconst Population = props => {\n    return <span className=\"planet-population\">{intToString(props.population)}</span>\n}\n\nconst Planet = props => {\n        \n    let { value } = props;\n    let numberPopulation = parseInt(value.population);\n\n    let fontsize = 20;\n    let fontweight = 300;\n\n    while(numberPopulation > 100000) {\n        numberPopulation /= 100;\n        fontsize += 4;\n        fontweight += 100;\n    }\n\n    let style = {\n        fontSize: fontsize+'px',\n        fontWeight: fontweight\n    }\n\n    const onPlanetClick = () => {\n        props.onPlanetClick(value);\n    }\n\n    return (\n        <div className=\"planet\" onClick={onPlanetClick}>\n            <span className=\"planet-title\" style={style}>{value.name}</span>\n            <Population population={value.population} />\n        </div>\n    )\n}\n\nexport default Planet;","import React from 'react';\n\nimport Planet from './Planet';\nimport Modal from './Modal';\nimport PlanetDetails from './PlanetDetails';\n\nlet timeout;\n\nclass Search extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: \"t\",\n            planets: [],\n            loading: false,\n            showModal: false,\n            selectedPlanet: {}\n        };\n    }\n\n    componentDidMount() {\n        this.onSearch();\n    }\n\n    onTextChange = (e) => {\n        let text = e.target.value;\n\n        this.setState({\n            text,\n            loading: true\n        });\n\n        clearTimeout(timeout);\n        \n        timeout = setTimeout(function() {\n            this.onSearch();\n        }.bind(this), 200);\n    }\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter') {\n            this.onSearch();\n        }\n    }\n    \n    onSearch = () => {\n        let { text } = this.state;\n\n        if (text.length > 0) {\n            fetch(`https://swapi.co/api/planets?search=${text}`)\n                .then(response => response.json())\n                .then(response => {\n                    let planets = response.results;\n\n                    this.setState({\n                        planets,\n                        loading: false\n                    });\n                });\n        } else {\n            this.setState({\n                planets: [],\n                loading: false\n            });\n        }\n    }\n\n    onModalClose = () => {\n        this.setState({\n            showModal: false,\n            selectedPlanet: {}\n        });\n    }\n\n    onPlanetClick = planet => {\n\n        console.log(\"lksjdlkajsdlajsldjlas\");\n\n        this.setState({\n            showModal: true,\n            selectedPlanet: planet\n        });\n    }\n\n    render() {\n\n        let { planets, loading, text, showModal, selectedPlanet } = this.state;\n\n        let listComponents = null;\n        if (loading) {\n            listComponents = (<div className=\"not-found no-result\">\n                                <h1>Searching planets</h1>\n                            </div>);\n        } else if (planets.length === 0) {\n            listComponents = (<div className=\"not-found no-result\">\n                                <h1>No results</h1>\n                            </div>);\n        } else {\n            let list = planets.map(item => {\n                return <Planet key={item.name} value={item} onPlanetClick={this.onPlanetClick}></Planet>;\n            })\n\n            listComponents = (\n                <React.Fragment>\n                    <div className=\"searched-for\">Search keyword: <span>{text}</span></div>\n                    <div className=\"search-results\">\n                    {\n                        list\n                    }\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"search-box\">\n                    <input className=\"search-text\" type=\"text\" value={this.state.text} placeholder=\"Search here..\" onKeyPress={this.handleKeyPress} onChange={this.onTextChange}/>\n                    <button className=\"search-button\" onClick={this.onSearch}>Search</button>\n                </div>\n                <div>\n                { listComponents }\n                </div>\n                {\n                    showModal ? \n                    (\n                      <Modal title={'Details'} onClose={() => this.onModalClose()} width={500}>\n                            <div className=\"planet\">\n                                <Planet value={selectedPlanet}/>\n                                <PlanetDetails value={selectedPlanet} />\n                            </div>\n                      </Modal>\n                    ) : null\n                  }\n            </React.Fragment>   \n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Modal = (props) => {\n\n    const onClose = event => {\n        if (event.target.className === 'modal-view') {\n            props.onClose();\n        }\n    }\n\n    return (\n        ReactDOM.createPortal(\n            <div className=\"modal-view\" onClick={(e) => onClose(e)}>\n                <div className=\"modal\">\n                <div className=\"modal-header\">\n                    <div className=\"modal-title\">{props.title}</div>\n                    <button className=\"modal-close\" onClick={props.onClose}>X</button>\n                </div>\n                <div className=\"modal-content\">\n                    { props.children }\n                </div>\n            </div>\n        </div>, document.getElementById('root'))\n    );\n\n}\n\nexport default Modal;","import React from 'react';\n\nconst PlanetDetails = props => {\n        \n    let { value } = props;\n\n    return (\n        <div className=\"planet-details\">\n            <div className=\"planet-detail\"><span>Climate: </span>{value.climate}</div>\n            <div className=\"planet-detail\"><span>Diameter: </span>{value.diameter}</div>\n            <div className=\"planet-detail\"><span>Orbital Period: </span>{value.orbital_period}</div>\n            <div className=\"planet-detail\"><span>Rotation Period: </span>{value.rotation_period}</div>\n            <div className=\"planet-detail\"><span>Terrain: </span>{value.terrain}</div>\n            <div className=\"planet-detail\"><span>Surface water: </span>{value.surface_water}</div>\n            <div className=\"planet-detail\"><span>Gravity: </span>{value.gravity}</div>\n        </div>\n    )\n}\n\nexport default PlanetDetails;","import React from 'react';\n\nconst Header = props  => {\n\n    return (\n        <header>\n            <h1>Star Wars</h1>\n            { \n                props.isLogin ?\n                (<div className=\"options\">\n                    <span className=\"username\">{props.user.name}</span>\n                    <button className=\"option-button\" onClick={props.onLogout}>Logout</button>\n                </div>) : null\n            }\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from  'react-redux';\n\nimport { logoutUser } from '../redux/actions';\n\nimport Search from './Search';\nimport Header from './Header';\n\nclass Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: \"\"\n        };\n    }\n\n    onLogout = () => {\n        this.props.history.push('/');\n        this.props.onLogoutUser();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Header {...this.props} onLogout={this.onLogout}/>\n                <Search {...this.props} />\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        isLogin: state.isLogin\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogoutUser() {\n            dispatch(logoutUser())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\n\nfunction NotFound() {\n    return (\n        <div className=\"not-found\">\n            <h1>Not Found</h1>\n        </div>\n    );\n}\n\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nimport './App.css';\n\nimport Login from \"./components/Login\";\nimport Dashboard from \"./components/Dashboard\";\nimport NotFound from './components/NotFound';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/dashboard\" component={Dashboard}/>\n          <Route component={NotFound} />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    LOGIN_USER,\n    LOGOUT_USER,\n    ADD_MESSAGE\n\n} from './actions';\n\nlet initState = {\n    isLogin: false,\n    messages: [],\n    user: \"\"\n};\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case LOGIN_USER : {\n            let  { isLogin } = state;\n            isLogin = !isLogin;\n            let { user } = action;\n            return Object.assign({}, state, { user, isLogin });\n        }\n        case LOGOUT_USER : {\n            let  { isLogin, userName } = state;\n            isLogin = !isLogin;\n            userName = \"\";\n            return Object.assign({}, state, { userName, isLogin });\n        }\n        case ADD_MESSAGE: {\n            let  { messages } = state;\n            let { message } = action;\n            messages.push(message);\n            return Object.assign({}, state, { messages });\n        }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { createStore } from 'redux';\n\nimport setupReducer  from './reducers';\n\nconst store = createStore(setupReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}